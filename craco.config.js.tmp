const CracoLessPlugin = require('craco-less');

// Babel 변환(transpile)이 필요한 패키지 목록
const packagesToTranspile = [
  '@solana',
  '@project-serum',
  // @ledgerhq는 alias로 처리하므로 여기서는 제외해도 될 수 있으나,
  // 만약을 위해 남겨두는 것이 안전합니다.
  '@ledgerhq', 
];

module.exports = {
  webpack: {
    // 1. 모듈 경로 오류 해결을 위한 alias 설정
    alias: {
      '@ledgerhq/devices/hid-framing': '@ledgerhq/devices/lib/hid-framing',
      // 다른 @ledgerhq 패키지들도 lib를 사용하도록 강제
      '@ledgerhq/hw-transport-webhid/lib-es': '@ledgerhq/hw-transport-webhid/lib',
      '@ledgerhq/hw-transport/lib-es': '@ledgerhq/hw-transport/lib',
      '@ledgerhq/errors/lib-es': '@ledgerhq/errors/lib',
      '@ledgerhq/devices/lib-es': '@ledgerhq/devices/lib',
    },
    configure: (webpackConfig) => {
      // 2. 최신 문법 오류 해결을 위한 babel-loader 설정
      const babelLoader = webpackConfig.module.rules.find(
        (rule) => rule.oneOf && rule.oneOf.find((r) => r.loader && r.loader.includes('babel-loader'))
      )?.oneOf.find((r) => r.loader && r.loader.includes('babel-loader'));

      if (babelLoader) {
        babelLoader.exclude = (modulePath) => {
          if (packagesToTranspile.some(pkg => modulePath.includes(pkg))) {
            return false;
          }
          return /node_modules/.test(modulePath);
        };
      }
      return webpackConfig;
    },
  },
  babel: {
    plugins: [
      ['@babel/plugin-proposal-class-properties', { loose: true }],
      ['@babel/plugin-proposal-private-methods', { loose: true }],
      ['@babel/plugin-proposal-private-property-in-object', { loose: true }],
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator',
    ],
  },
  plugins: [
    {
      plugin: CracoLessPlugin,
      options: {
        lessLoaderOptions: {
          lessOptions: {
            modifyVars: { '@primary-color': '#2abdd2' },
            javascriptEnabled: true,
          },
        },
      },
    },
  ],
};
